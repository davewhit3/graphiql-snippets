{
  "version": 3,
  "sources": ["../../.pnpm/codemirror-graphql@2.2.1_@codemirror+language@6.0.0_codemirror@5.65.19_graphql@16.11.0/node_modules/codemirror-graphql/src/mode.ts", "../../.pnpm/codemirror-graphql@2.2.1_@codemirror+language@6.0.0_codemirror@5.65.19_graphql@16.11.0/node_modules/codemirror-graphql/src/utils/mode-factory.ts"],
  "sourcesContent": ["/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport modeFactory from './utils/mode-factory';\n\nCodeMirror.defineMode('graphql', modeFactory);\n", "/**\n *  Copyright (c) 2021 GraphQL Contributors\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport CodeMirror from 'codemirror';\nimport {\n  LexRules,\n  ParseRules,\n  isIgnored,\n  onlineParser,\n} from 'graphql-language-service';\nimport indent from './mode-indent';\n\n/**\n * The GraphQL mode is defined as a tokenizer along with a list of rules, each\n * of which is either a function or an array.\n *\n *   * Function: Provided a token and the stream, returns an expected next step.\n *   * Array: A list of steps to take in order.\n *\n * A step is either another rule, or a terminal description of a token. If it\n * is a rule, that rule is pushed onto the stack and the parsing continues from\n * that point.\n *\n * If it is a terminal description, the token is checked against it using a\n * `match` function. If the match is successful, the token is colored and the\n * rule is stepped forward. If the match is unsuccessful, the remainder of the\n * rule is skipped and the previous rule is advanced.\n *\n * This parsing algorithm allows for incremental online parsing within various\n * levels of the syntax tree and results in a structured `state` linked-list\n * which contains the relevant information to produce valuable typeahead.\n */\nconst graphqlModeFactory: CodeMirror.ModeFactory<any> = config => {\n  const parser = onlineParser({\n    eatWhitespace: stream => stream.eatWhile(isIgnored),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize },\n  });\n\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token as unknown as NonNullable<\n      CodeMirror.Mode<any>['token']\n    >, // TODO: Check if the types are indeed compatible\n    indent,\n    electricInput: /^\\s*[})\\]]/,\n    fold: 'brace',\n    lineComment: '#',\n    closeBrackets: {\n      pairs: '()[]{}\"\"',\n      explode: '()[]{}',\n    },\n  };\n};\n\nexport default graphqlModeFactory;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AASA,wBAAuB;;;AC6BvB,IAAM,qBAAkD,YAAS;AAC/D,QAAM,SAAS,aAAa;IAC1B,eAAe,YAAU,OAAO,SAAS,SAAS;IAClD,UAAU;IACV,YAAY;IACZ,cAAc,EAAE,SAAS,OAAO,QAAO;GACxC;AAED,SAAO;IACL;IACA,YAAY,OAAO;IACnB,OAAO,OAAO;IAGd;IACA,eAAe;IACf,MAAM;IACN,aAAa;IACb,eAAe;MACb,OAAO;MACP,SAAS;;;AAGf;AAEA,IAAA,uBAAe;;;ADnDf,kBAAAA,QAAW,WAAW,WAAW,oBAAW;",
  "names": ["CodeMirror"]
}
