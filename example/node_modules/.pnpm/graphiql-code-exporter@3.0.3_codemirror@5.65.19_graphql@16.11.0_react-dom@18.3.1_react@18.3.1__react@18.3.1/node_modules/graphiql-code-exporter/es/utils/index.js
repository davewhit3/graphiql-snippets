function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function distinct(array) {
  return [].concat(_toConsumableArray(new Set(array)));
}

var unnamedSymbols = ['query', 'mutation', 'subscription'];

function isOperationNamed(operationData) {
  return unnamedSymbols.indexOf(operationData.name.trim()) === -1;
}

var findFirstNamedOperation = function findFirstNamedOperation(operations) {
  return operations.find(isOperationNamed);
};

function addLeftWhitespace(s, padding) {
  var pad = [].concat(_toConsumableArray(new Array(padding + 1))).join(' ');
  return s.split('\n').map(function (x) {
    return '' + pad + x;
  }).join('\n');
}

function collapseExtraNewlines(s) {
  return s.replace(/\n{2,}/g, '\n\n');
}

export { distinct, findFirstNamedOperation, isOperationNamed, addLeftWhitespace, collapseExtraNewlines };